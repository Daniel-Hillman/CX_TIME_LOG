You are my development assistant for the Cursor-based web app. Your job is to remove all existing “intelligent messaging”/“AI message”/“Ask Question”/“Agent” pages and components, and then rebuild them from scratch—following the app’s established style, structure, and coding conventions. An OpenAI API key has already been provided in the configuration.

1. **Delete any and all existing “intelligent messaging”-related code**  
   • Search the entire project for references to:  
     • “intelligent messaging”  
     • “AI message”  
     • “Ask a question”  
     • “Agent” (as a tab name or component)  
   • Remove those files, routes, components, and view references completely, so no stale UI elements or code remain.

2. **Create a new “Agent” tab/page**  
   • The new tab should be labeled **Agent** in the main navigation.  
   • Follow the app’s existing folder structure and naming conventions for new pages/components.  
   • Use the same styling (CSS classes, layout grid, color scheme, typography) as other top-level tabs.

3. **Build two distinct input features on the Agent page**  
   A. **Improve Your Message**  
   • Add a labeled text input field (textarea) where the logged-in advisor can paste or type their draft message.  
   • Include a “Generate” button that sends the draft to OpenAI via the provided API key.  
   • When the response returns, display an improved, professional, factual version of the message.  
   • Append a sign-off underneath the generated content exactly as:  
     ```
     Kind regards,
     {Advisor’s Name}
     {Selected Brand}
     ```  
     – The advisor’s name should be fetched from the current user’s profile.  
     – “Selected Brand” is chosen from a dropdown menu (see below).  
   B. **Ask a Question**  
   • Directly below “Improve Your Message,” add a second textarea labeled “Ask a Question.”  
   • When the advisor submits a question, send it to the same OpenAI model (which is being trained on advisor-specific knowledge).  
   • Display the model’s clear, factual answer beneath the input, styled consistently with other result panels.  
   • No sign-off or brand dropdown is required here—only the question input and response.

4. **Implement a “Brand” dropdown selector**  
   • Above (or next to) both text areas, include a single dropdown labeled “Brand.”  
   • Options: “Polly,” “Tom,” “Winston,” and “Custom.”  
   • If “Custom” is chosen, reveal a small text field next to the dropdown so the user can type in any other brand name.  
   • When the AI generates the improved message, insert the selected brand exactly as shown (or the custom text if entered).  

5. **Ensure proper API integration**  
   • Use the OpenAI SDK already configured in the app (do not replace the key).  
   • For “Improve Your Message,” call the endpoint with a prompt like:  
     ```
     “Improve and professionalize this advisor message. Then append a sign-off with ‘Kind regards,’ the advisor’s name, and the selected brand.”
     ```  
   • For “Ask a Question,” call the endpoint with a prompt like:  
     ```
     “You are an AI assistant trained on our company’s advisor knowledge. Answer the question below as clearly and factually as possible.”  
     Input: {User’s Question}
     ```  
   • Handle asynchronous loading states (e.g., spinner or “Generating…” text) and gracefully display any API errors.

6. **Follow existing coding style and folder structure**  
   • Locate where other top-level tabs/pages live (e.g., `/src/pages/…` or `/components/…`).  
   • Create the new Agent files in the same directory.  
   • Name components and CSS classes consistently (e.g., if pages use `PageName.tsx` and `page-name.module.css`, follow that pattern).  
   • Reuse shared layout components (headers, footers, sidebars) so the Agent page matches the rest of the app.

7. **User permissions & visibility**  
   • Only “admin” or “advisor” roles (as defined elsewhere) should see and interact with the Agent tab.  
   • If the app uses a permissions context or route guard, register the new “Agent” route under the correct role.  
   • Ensure non-admin users cannot navigate directly via URL if they lack permission.

8. **Testing & validation**  
   • Verify that the old intelligent-messaging pages are completely gone (no broken links, 404 errors, or stale imports).  
   • Confirm that the Agent tab appears only for authorized users.  
   • Test both features (“Improve Your Message” and “Ask a Question”) end-to-end:  
     • Enter sample text, click “Generate,” and inspect the output (professional tone, sign-off, correct brand).  
     • Ask a sample question and verify the answer’s accuracy and formatting.  
   • Check mobile and desktop layouts for responsive issues—match how other pages behave.

9. **Documentation & code comments**  
   • At the top of each new file, add a brief comment explaining its purpose (e.g., `// AgentPage: contains “Improve Your Message” and “Ask a Question” features`).  
   • In any custom hooks or utilities you write, include inline JSDoc comments so other developers can quickly understand parameters and return values.  
   • Update the project’s README (or a dedicated docs file) to note the new “Agent” feature and the expected usage.

By following these steps, you will have entirely replaced the old intelligent-messaging code with a brand-new Agent tab. This new page will allow advisors to (1) improve drafted messages via OpenAI—complete with a “Kind regards, {Name}, {Brand}” sign-off—and (2) ask any work-related question, receiving a clear, factual response. Make sure everything matches the existing app’s style conventions and permission logic.
